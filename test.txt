List<IMyTerminalBlock> rotorScatterList = null;


public Program()
{
    // The constructor, called only once every session and
    // always before any other method is called. Use it to
    // initialize your script. 
    //     
    // The constructor is optional and can be removed if not
    // needed.
    // 
    // It's recommended to set RuntimeInfo.UpdateFrequency 
    // here, which will allow your script to run itself without a 
    // timer block.
}

public void Save()
{
    // Called when the program needs to save its state. Use
    // this method to save your state to the Storage field
    // or some other means. 
    // 
    // This method is optional and can be removed if not
    // needed.
}

public void Main(string argument, UpdateType updateSource)
{
    // The main entry point of the script, invoked every time
    // one of the programmable block's Run actions are invoked,
    // or the script updates itself. The updateSource argument
    // describes where the update came from.
    // 
    // The method itself is required, but the arguments above
    // can be removed if not needed.

if (rotorScatterList == null) {
rotorScatterList = new List<IMyTerminalBlock>();
GridTerminalSystem.GetBlocksOfType<IMyMotorStator> (rotorScatterList, b=>b.CubeGrid==Me.CubeGrid);
}

string s = "";
var r = rotorScatterList[0];
List<ITerminalAction> resultList = new List<ITerminalAction>();
r.GetActions(resultList);
for (int i =0; i < resultList.Count; i++){
string name = resultList[i].Name.ToString();
if (name.Contains("Add"))
s +="s " +  resultList[i].Name + " e" + "\n";
}
Echo(s);

PlayActionListWithName(rotorScatterList, "Add Rotor Head");

}

void PlayActionList(List<IMyTerminalBlock> blocks, String action) {
    if(blocks == null) return;
	for(int i = 0; i < blocks.Count; i ++)
	{
		var a = blocks[i].GetActionWithName(action);
		if (a==null) Echo("no action" + action);
		if (a!=null) a.Apply(blocks[i]);
	}
}

void PlayActionListWithName(List<IMyTerminalBlock> blocks, String action) {
    if(blocks == null) return;
	for(int i = 0; i < blocks.Count; i ++)
	{
		List<ITerminalAction> resultList = new List<ITerminalAction>();
		blocks[i].GetActions(resultList);
		foreach(var a in resultList) {
			string name = a.Name.ToString();
			if (name.Equals(action)) {
				a.Apply(blocks[i]);
			}
		}
	}
}
